# Algorithms
def calculate_scheduling(algorithm, processes, time_quantum=2):
    if algorithm == "FCFS":
        return fcfs(processes)
    elif algorithm == "SJF":
        return sjf(processes)
    elif algorithm == "Round Robin":
        return round_robin(processes, time_quantum)
    elif algorithm == "Priority Scheduling":
        return priority_scheduling(processes)

# FCFS Scheduling
def fcfs(processes):
    processes.sort(key=lambda x: x[1])  # Sort by Arrival Time
    completion_time, schedule = 0, []
    for process in processes:
        pid, arrival, burst, priority = process
        start_time = max(completion_time, arrival)
        completion_time = start_time + burst
        waiting_time = start_time - arrival
        turnaround_time = completion_time - arrival
        schedule.append((pid, start_time, completion_time, waiting_time, turnaround_time))
    return schedule

# SJF Scheduling
def sjf(processes):
    processes.sort(key=lambda x: (x[1], x[2]))  # Sort by Arrival, then Burst Time
    remaining, completion_time, schedule = processes.copy(), 0, []
    while remaining:
        available = [p for p in remaining if p[1] <= completion_time]
        if available:
            available.sort(key=lambda x: x[2])
            process = available[0]
            remaining.remove(process)
        else:
            process = remaining.pop(0)
        pid, arrival, burst, priority = process
        start_time = max(completion_time, arrival)
        completion_time = start_time + burst
        waiting_time = start_time - arrival
        turnaround_time = completion_time - arrival
        schedule.append((pid, start_time, completion_time, waiting_time, turnaround_time))
    return schedule

# Round Robin Scheduling
def round_robin(processes, quantum):
    queue, time, schedule = processes.copy(), 0, []
    remaining_burst = {p[0]: p[2] for p in processes}
    last_completion = 0  # To handle gaps between arrivals

    while queue:
        pid, arrival, burst, priority = queue.pop(0)
        
        # If idle time exists
        if time < arrival:
            time = arrival

        if remaining_burst[pid] > quantum:
            start_time = time
            time += quantum
            remaining_burst[pid] -= quantum
            queue.append((pid, arrival, burst, priority))  # Re-add to queue
        else:
            start_time = time
            time += remaining_burst[pid]
            completion_time = time
            waiting_time = completion_time - arrival - burst
            turnaround_time = completion_time - arrival
            schedule.append((pid, start_time, completion_time, waiting_time, turnaround_time))

    return schedule

# Priority Scheduling
def priority_scheduling(processes):
    processes.sort(key=lambda x: (x[1], x[3]))  # Sorting by Arrival time and then Priority
    completion_time, schedule = 0, []
    for process in processes:
        pid, arrival, burst, priority = process
        start_time = max(completion_time, arrival)
        completion_time = start_time + burst
        waiting_time = start_time - arrival
        turnaround_time = completion_time - arrival
        schedule.append((pid, start_time, completion_time, waiting_time, turnaround_time))
    return schedule
